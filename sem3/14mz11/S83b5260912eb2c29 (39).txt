#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <signal.h>
#include <limits.h>
#include <math.h>

enum { INT_CNT = 4, DIV_MIN = 2 };

void
die(int condition) {
    if (condition) {
        exit(EXIT_FAILURE);
    }
}


volatile int cnt = 1;
volatile unsigned i;
volatile unsigned prime = 0;

void print_handle(int s) {
    if (cnt >= INT_CNT) {
        exit(EXIT_SUCCESS);
    }
    printf("%u\n", prime);
    fflush(stdout);
    cnt++;
}

void terminate_handle(int s) {
    exit(0);
}

int is_prime(unsigned n) {
    unsigned sq = (unsigned) sqrt((double) n) + 1;
    unsigned d = DIV_MIN;
    while (d <= sq && d < n) {
        if (n % d == 0) {
            return 0;
        }
        d++;
    }
    return 1;
}

int main(int argc, char **argv) {
    sigaction(SIGINT, &(struct sigaction) {.sa_handler = print_handle, .sa_flags = SA_RESTART}, NULL);
    sigaction(SIGTERM, &(struct sigaction) {.sa_handler = terminate_handle, .sa_flags = SA_RESTART}, NULL);
    unsigned low, high;
    scanf("%u%u", &low, &high);
    
    i = low;
    printf("%d\n", getpid());
    fflush(stdout);
    while (i < high) {
        if (is_prime(i)) {
            prime = i;
        }
        i++;
    }
    
    printf("-1\n");
    fflush(stdout);
    return 0;
}
