#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <time.h>

const char python_interpret_begin[] = "#!/usr/bin/env python3\nimport os\nprint(";
const char python_interpret_end[] = ")\nos.remove(os.path.abspath(__file__))\n";

void
die(int condition) {
    if (condition) {
        exit(EXIT_FAILURE);
    }
}

char*
concat(char *s, const char *appendix) {
    die(strlen(s) + strlen(appendix) > PATH_MAX);
    strcat(s, appendix);
    return s;
}

void
mktmp(char *buffer, const char *dir) {
    memcpy(buffer, dir, strlen(dir) + 1);
    srand(0);
    unsigned rdint = rand() % UINT_MAX;
    char tmpname[sizeof(rdint) * CHAR_BIT + 1];
    sprintf(tmpname, "%u", rdint);
    struct stat properties;
    while (stat(concat(concat(buffer, "/"), tmpname), &properties) == 0) {
        buffer[strlen(dir)] = '\0';
        rdint = rand() % UINT_MAX;
        sprintf(tmpname, "%u", rdint);
    }
}

int
main(int argc, char **argv) {
    char *path = getenv("XDG_RUNTIME_DIR");
    if (path == NULL) {
        path = getenv("TMPDIR");
    }
    if (path == NULL) {
        path = (char*) "/tmp";
    }
    
    char large_path[PATH_MAX + 1];
    mktmp(large_path, path);
    int ouf = open(large_path, O_CREAT | O_WRONLY, 0755);
    write(ouf, python_interpret_begin, sizeof(python_interpret_begin) - 1);
    for (int arg = 1; arg < argc; arg++) {
        write(ouf, argv[arg], strlen(argv[arg]));
        if (arg < argc - 1) {
            char mult[] = "*";
            write(ouf, mult, sizeof(mult) - 1);
        }
    }
    write(ouf, python_interpret_end, sizeof(python_interpret_end) - 1);
    close(ouf);
    
    execl(large_path, large_path, NULL);
    unlink(large_path);
    die(1);
    
    return 0;
}
