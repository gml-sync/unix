#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h> 
#include <fcntl.h>
#include <time.h>

#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

enum { READ = 0, WRITE = 1, PRINT_LEN = 2, UNIX_EPOCH = 1900 };

void
die(int condition) {
    if (condition) {
        printf("QUIT\n");
        exit(EXIT_FAILURE);
    }
}

int
main(int argc, char **argv) {
    int chan[2];
    die(pipe(chan) == -1);
    pid_t pid1 = fork();
    die(pid1 == -1);
    
    if (pid1 == 0) {
        pid_t pid2 = fork();
        die(pid2 == -1);
        
        if (pid2 == 0) {
            pid_t pid3 = fork();
            die(pid3 == -1);
            if (pid3 == 0) {
                time_t t = time(NULL);
                die(write(chan[WRITE], &t, sizeof(t)) < sizeof(t));
                die(write(chan[WRITE], &t, sizeof(t)) < sizeof(t));
                die(write(chan[WRITE], &t, sizeof(t)) < sizeof(t));
                die(close(chan[READ]));
                die(close(chan[WRITE]));
            } else {
                time_t t;
                die(read(chan[READ], &t, sizeof(t)) < sizeof(t));
                struct tm *timeinfo = localtime(&t);
                printf ("D:%0*d\n", PRINT_LEN, timeinfo->tm_mday);
                die(close(chan[READ]));
                die(close(chan[WRITE]));
            }
        } else {
            waitpid(pid2, NULL, 0);
            time_t t;
            die(read(chan[READ], &t, sizeof(t)) < sizeof(t));
            struct tm *timeinfo = localtime(&t);
            printf ("M:%0*d\n", PRINT_LEN, timeinfo->tm_mon + 1);
            die(close(chan[READ]));
            die(close(chan[WRITE]));
        }
    } else {
        waitpid(pid1, NULL, 0);
        time_t t;
        die(read(chan[READ], &t, sizeof(t)) < sizeof(t));
        struct tm *timeinfo = localtime(&t);
        printf ("Y:%d\n", timeinfo->tm_year + UNIX_EPOCH);
        die(close(chan[READ]));
        die(close(chan[WRITE]));
    }
    
    while (wait(NULL) != -1) {
        ;
    }
    
    return 0;
}
