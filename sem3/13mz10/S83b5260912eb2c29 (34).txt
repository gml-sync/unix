#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h> 
#include <fcntl.h>
#include <time.h>

#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

enum { READ = 0, WRITE = 1, PROC_A = 1, PROC_B, PROC_C, FILE_A, FILE_B };

void
die(int condition) {
    if (condition) {
        printf("QUIT\n");
        exit(EXIT_FAILURE);
    }
}

int waitstatus(pid_t pid) {
    int ret;
    waitpid(pid, &ret, 0);
    return !(WIFEXITED(ret) && WEXITSTATUS(ret) == 0);
}

int
main(int argc, char **argv) {
    int chan[2];
    die(pipe(chan) == -1);
    pid_t pid3 = fork();
    die(pid3 == -1);
    if (pid3 == 0) { // cmd3
        close(chan[WRITE]);
        int ouf = open(argv[FILE_B], O_WRONLY | O_CREAT | O_APPEND, 0664);
        dup2(chan[READ], STDIN_FILENO);
        dup2(ouf, STDOUT_FILENO);
        char *cmd = argv[PROC_C];
        execlp(cmd, cmd, NULL);
        return 1;
    }
    
    
    pid_t pid = fork();
    die(pid == -1);
    if (pid == 0) { // cmd
        close(chan[READ]);
        dup2(chan[WRITE], STDOUT_FILENO);
        
        pid_t pid1 = fork();
        die(pid1 == -1);
        if (pid1 == 0) { // cmd1
            int inf = open(argv[FILE_A], O_RDONLY);
            dup2(inf, STDIN_FILENO);
            char *cmd = argv[PROC_A];
            execlp(cmd, cmd, NULL);
            return 1;
        }
        int ret = waitstatus(pid1);
        if (ret != 0) { // Process failed
            return 1;
        }
        
        pid1 = fork();
        die(pid1 == -1);
        if (pid1 == 0) { // cmd2
            char *cmd = argv[PROC_B];
            execlp(cmd, cmd, NULL);
            return 1;
        }
        
        return waitstatus(pid1);
    }
    
    die(close(chan[READ]) == -1);
    die(close(chan[WRITE]) == -1);
    waitstatus(pid3);
    waitstatus(pid);
    
    return 0;
}
